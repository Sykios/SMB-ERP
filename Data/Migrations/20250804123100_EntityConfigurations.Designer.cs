// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMBErp.Data;

#nullable disable

namespace SMBErp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250804123100_EntityConfigurations")]
    partial class EntityConfigurations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.18");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SMBErp.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountHolder")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("BIC")
                        .HasMaxLength(11)
                        .HasColumnType("TEXT")
                        .HasComment("BIC/SWIFT Code");

                    b.Property<string>("BIC2")
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName2")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Stadt");

                    b.Property<string>("CommercialRegister")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyColor")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Land");

                    b.Property<string>("Court")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultPaymentTermDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(30)
                        .HasComment("Standard Zahlungsziel in Tagen");

                    b.Property<decimal>("DefaultVatRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(19.00m)
                        .HasComment("Standard Mehrwertsteuersatz in Prozent");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasComment("E-Mail-Adresse");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Faxnummer");

                    b.Property<string>("IBAN")
                        .HasMaxLength(34)
                        .HasColumnType("TEXT")
                        .HasComment("IBAN Bankkonto");

                    b.Property<string>("IBAN2")
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSmallBusiness")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LegalForm")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Rechtsform (GmbH, AG, etc.)");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ManagingDirector")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Firmenname");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Telefonnummer");

                    b.Property<string>("SecondaryColor")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<string>("SmallBusinessText")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Straße und Hausnummer");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Steuernummer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VatId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Umsatzsteuer-Identifikationsnummer");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasComment("Website URL");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("Postleitzahl");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Companies_Email");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Companies_Name");

                    b.HasIndex("TaxNumber")
                        .HasDatabaseName("IX_Companies_TaxNumber");

                    b.HasIndex("VatId")
                        .HasDatabaseName("IX_Companies_VatId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("SMBErp.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternativeEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingCountry")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Deutschland");

                    b.Property<string>("BillingStreet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CreditLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DiscountDays")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastContactDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentTermDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(14);

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingCity")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingCountry")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingStreet")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Active");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VatId")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Customers_CreatedAt");

                    b.HasIndex("CustomerNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Customers_CustomerNumber");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Customers_Email");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Customers_Status");

                    b.HasIndex("ContactLastName", "ContactFirstName")
                        .HasDatabaseName("IX_Customers_ContactName");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("SMBErp.Models.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AttachPdfAutomatically")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvailablePlaceholders")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("BccEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHtml")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplyToEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_EmailTemplates_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_EmailTemplates_Name");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_EmailTemplates_Type");

                    b.ToTable("EmailTemplates", (string)null);
                });

            modelBuilder.Entity("SMBErp.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConclusionText")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerReference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DiscountDays")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InternalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("IntroductionText")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentTermDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(14);

                    b.Property<string>("ProjectNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Draft");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VatAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Invoices_CustomerId");

                    b.HasIndex("DueDate")
                        .HasDatabaseName("IX_Invoices_DueDate");

                    b.HasIndex("InvoiceDate")
                        .HasDatabaseName("IX_Invoices_InvoiceDate");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Invoices_InvoiceNumber");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Invoices_Status");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("SMBErp.Models.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Positionsbeschreibung");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER")
                        .HasComment("Rechnungs-ID");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasComment("Artikel-ID (optional)");

                    b.Property<string>("ItemNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER")
                        .HasComment("Positionsnummer in der Rechnung");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,3)")
                        .HasComment("Menge");

                    b.Property<int>("Unit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1)
                        .HasComment("Mengeneinheit");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Einzelpreis (netto)");

                    b.Property<decimal>("VatRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Mehrwertsteuersatz in Prozent");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("IX_InvoiceItems_InvoiceId");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("IX_InvoiceItems_ItemId");

                    b.HasIndex("UnitPrice")
                        .HasDatabaseName("IX_InvoiceItems_UnitPrice");

                    b.HasIndex("VatRate")
                        .HasDatabaseName("IX_InvoiceItems_VatRate");

                    b.HasIndex("InvoiceId", "Position")
                        .IsUnique()
                        .HasDatabaseName("IX_InvoiceItems_Invoice_Position");

                    b.ToTable("InvoiceItems", (string)null);
                });

            modelBuilder.Entity("SMBErp.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Artikelkategorie");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Erstellungsdatum");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("Artikelbeschreibung");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Eindeutige Artikelnummer");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Artikelname");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Einkaufspreis (netto)");

                    b.Property<decimal>("SalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Verkaufspreis (netto)");

                    b.Property<int>("Unit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1)
                        .HasComment("Mengeneinheit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasComment("Letzte Änderung");

                    b.Property<decimal>("VatRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(19.00m)
                        .HasComment("Mehrwertsteuersatz in Prozent");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Items_Category");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Items_CreatedAt");

                    b.HasIndex("ItemNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Items_ItemNumber");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Items_Name");

                    b.HasIndex("SalePrice")
                        .HasDatabaseName("IX_Items_SalePrice");

                    b.ToTable("Items", (string)null);

                    b.HasDiscriminator<string>("ItemType").HasValue("Item");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SMBErp.Models.Product", b =>
                {
                    b.HasBaseType("SMBErp.Models.Item");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Barcode/EAN");

                    b.Property<string>("Dimensions")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Abmessungen (LxBxH)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Hersteller");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Herstellerteilenummer");

                    b.Property<decimal?>("MaximumStock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,3)")
                        .HasComment("Höchstbestand");

                    b.Property<decimal>("MinimumStock")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,3)")
                        .HasDefaultValue(0m)
                        .HasComment("Mindestbestand");

                    b.Property<decimal>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,3)")
                        .HasDefaultValue(0m)
                        .HasComment("Aktueller Lagerbestand");

                    b.Property<string>("StorageLocation")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Lagerort");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasComment("Gewicht in kg");

                    b.HasIndex("Barcode")
                        .IsUnique()
                        .HasDatabaseName("IX_Products_Barcode")
                        .HasFilter("[Barcode] IS NOT NULL AND [Barcode] != ''");

                    b.HasIndex("Manufacturer")
                        .HasDatabaseName("IX_Products_Manufacturer");

                    b.HasIndex("StockQuantity")
                        .HasDatabaseName("IX_Products_StockQuantity");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("IX_Products_SupplierId");

                    b.HasIndex("StockQuantity", "MinimumStock")
                        .HasDatabaseName("IX_Products_LowStock");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("SMBErp.Models.Service", b =>
                {
                    b.HasBaseType("SMBErp.Models.Item");

                    b.Property<decimal?>("AdditionalMaterialCosts")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("Materialkosten");

                    b.Property<string>("BillingRhythm")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Abrechnungsrhythmus");

                    b.Property<bool>("CanBeRemote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Remote durchführbar");

                    b.Property<decimal?>("EstimatedDurationHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasComment("Geschätzte Dauer in Stunden");

                    b.Property<decimal?>("FlatTravelCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("Pauschale Reisekosten");

                    b.Property<bool>("IsRecurring")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Wiederkehrender Service");

                    b.Property<decimal?>("MinimumDurationHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("RecurrenceInterval")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredQualifications")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TravelCostPerKm")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasDefaultValue(0m)
                        .HasComment("Reisekosten pro Kilometer");

                    b.Property<string>("WorkLocation")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Arbeitsort/Standort");

                    b.HasIndex("BillingRhythm")
                        .HasDatabaseName("IX_Services_BillingRhythm");

                    b.HasIndex("EstimatedDurationHours")
                        .HasDatabaseName("IX_Services_Duration");

                    b.HasIndex("IsRecurring")
                        .HasDatabaseName("IX_Services_IsRecurring");

                    b.HasDiscriminator().HasValue("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SMBErp.Models.Invoice", b =>
                {
                    b.HasOne("SMBErp.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SMBErp.Models.InvoiceItem", b =>
                {
                    b.HasOne("SMBErp.Models.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceItems_Invoice");

                    b.HasOne("SMBErp.Models.Item", "Item")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_InvoiceItems_Item");

                    b.Navigation("Invoice");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SMBErp.Models.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("SMBErp.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("SMBErp.Models.Item", b =>
                {
                    b.Navigation("InvoiceItems");
                });
#pragma warning restore 612, 618
        }
    }
}
